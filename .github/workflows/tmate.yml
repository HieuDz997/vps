name: Create Custom SSH Server (Auto Restart)

on:
  workflow_dispatch:
  repository_dispatch:
    types: [create-vps]

jobs:
  start-vps:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6 hours

    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v3

      - name: üìÅ Prepare dirs
        run: mkdir -p links .backup

      - name: üíæ Restore backup (optional)
        run: |
          name="${{ github.event.client_payload.vps_name || 'manual-vps' }}"
          if [ "${{ github.event.client_payload.backup }}" == "true" ]; then
            unzip ".backup/$name.zip" -d . || echo "‚ö†Ô∏è No backup found."
          fi

      - name: üë§ Setup Custom SSH User
        run: |
          # Create user hieudzontop
          sudo useradd -m -s /bin/bash hieudzontop
          echo 'hieudzontop:hieudzkoaibang' | sudo chpasswd
          sudo usermod -aG sudo hieudzontop
          
          # Setup SSH config for password auth
          sudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config
          sudo sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
          sudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin no/' /etc/ssh/sshd_config
          
          # Add specific config for hieudzontop
          sudo tee -a /etc/ssh/sshd_config > /dev/null << 'EOF'

# Custom config for hieudzontop user
Match User hieudzontop
    PasswordAuthentication yes
    PubkeyAuthentication no
    PermitEmptyPasswords no
EOF
          
          # Restart SSH service
          sudo systemctl restart ssh
          echo "‚úÖ SSH user hieudzontop created with password auth"

      - name: üîê Start tmate session (backup access)
        run: |
          sudo apt update -y && sudo apt install -y tmate jq
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          SSH=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')
          WEB=$(tmate -S /tmp/tmate.sock display -p '#{tmate_web}')
          
          echo "üîß BACKUP ACCESS (tmate):" | tee "links/${{ github.event.client_payload.vps_name || 'manual-vps' }}.txt"
          echo "$SSH" | tee -a "links/${{ github.event.client_payload.vps_name || 'manual-vps' }}.txt"
          echo "Web: $WEB" | tee -a "links/${{ github.event.client_payload.vps_name || 'manual-vps' }}.txt"
          echo "" | tee -a "links/${{ github.event.client_payload.vps_name || 'manual-vps' }}.txt"

      - name: üöÄ Setup SSH Tunnel v·ªõi Serveo (gi·ªëng tmate format)
        run: |
          # Serveo provides SSH tunneling like tmate
          echo "üîÑ Setting up Serveo SSH tunnel..."
          
          # Create SSH key for serveo
          ssh-keygen -t rsa -b 2048 -f ~/.ssh/serveo_key -N ""
          
          # Start serveo tunnel (s·∫Ω t·∫°o subdomain random)
          nohup ssh -o StrictHostKeyChecking=no -R 80:localhost:22 serveo.net > serveo.log 2>&1 &
          sleep 10
          
          # Try to get serveo URL from log
          if [ -f serveo.log ]; then
            SERVEO_URL=$(grep -o 'https://[^.]*\.serveo\.net' serveo.log | head -1)
            SERVEO_HOST=$(echo $SERVEO_URL | cut -d'/' -f3)
            
            if [ ! -z "$SERVEO_HOST" ]; then
              echo "üéØ MAIN SSH ACCESS:" | tee -a "links/${{ github.event.client_payload.vps_name || 'manual-vps' }}.txt"
              echo "ssh hieudzontop@$SERVEO_HOST" | tee -a "links/${{ github.event.client_payload.vps_name || 'manual-vps' }}.txt"
              echo "Password: hieudzkoaibang" | tee -a "links/${{ github.event.client_payload.vps_name || 'manual-vps' }}.txt"
              echo "" | tee -a "links/${{ github.event.client_payload.vps_name || 'manual-vps' }}.txt"
            fi
          fi

      - name: üåê Setup ngrok tunnel (alternative)
        run: |
          # Download ngrok
          wget -q https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
          tar xzf ngrok-v3-stable-linux-amd64.tgz
          
          # Start ngrok tunnel for SSH
          nohup ./ngrok tcp 22 > ngrok.log 2>&1 &
          sleep 8
          
          # Get ngrok info
          NGROK_INFO=$(curl -s http://127.0.0.1:4040/api/tunnels 2>/dev/null || echo "{}")
          NGROK_URL=$(echo $NGROK_INFO | jq -r '.tunnels[0].public_url // empty' 2>/dev/null)
          
          if [ ! -z "$NGROK_URL" ] && [ "$NGROK_URL" != "null" ]; then
            NGROK_HOST=$(echo $NGROK_URL | sed 's|tcp://||' | cut -d':' -f1)
            NGROK_PORT=$(echo $NGROK_URL | sed 's|tcp://||' | cut -d':' -f2)
            
            echo "üîÑ ALTERNATIVE SSH:" | tee -a "links/${{ github.event.client_payload.vps_name || 'manual-vps' }}.txt"
            echo "ssh hieudzontop@$NGROK_HOST -p $NGROK_PORT" | tee -a "links/${{ github.event.client_payload.vps_name || 'manual-vps' }}.txt"
            echo "Password: hieudzkoaibang" | tee -a "links/${{ github.event.client_payload.vps_name || 'manual-vps' }}.txt"
            echo "" | tee -a "links/${{ github.event.client_payload.vps_name || 'manual-vps' }}.txt"
          fi

      - name: üè† Setup localhost.run tunnel (th√™m option)
        run: |
          echo "üîÑ Setting up localhost.run tunnel..."
          nohup ssh -o StrictHostKeyChecking=no -R 80:localhost:22 localhost.run > localhost.log 2>&1 &
          sleep 8
          
          if [ -f localhost.log ]; then
            LOCALHOST_URL=$(grep -o 'https://[^.]*\.lhr\.life' localhost.log | head -1 || grep -o '[a-z0-9]*\.localhost\.run' localhost.log | head -1)
            
            if [ ! -z "$LOCALHOST_URL" ]; then
              LOCALHOST_HOST=$(echo $LOCALHOST_URL | sed 's|https://||' | sed 's|http://||')
              echo "üåç LOCALHOST.RUN SSH:" | tee -a "links/${{ github.event.client_payload.vps_name || 'manual-vps' }}.txt"
              echo "ssh hieudzontop@$LOCALHOST_HOST" | tee -a "links/${{ github.event.client_payload.vps_name || 'manual-vps' }}.txt"
              echo "Password: hieudzkoaibang" | tee -a "links/${{ github.event.client_payload.vps_name || 'manual-vps' }}.txt"
              echo "" | tee -a "links/${{ github.event.client_payload.vps_name || 'manual-vps' }}.txt"
            fi
          fi

      - name: üöÄ Start Playit (backup tunnel)
        run: |
          wget -q https://github.com/playit-cloud/playit-agent/releases/latest/download/playit-linux-amd64 -O playit
          chmod +x playit
          nohup ./playit > playit.log 2>&1 &
          echo "‚úÖ Playit tunnel started as backup"

      - name: üìù Create connection summary
        run: |
          echo "===== H∆Ø·ªöNG D·∫™N K·∫æT N·ªêI =====" | tee -a "links/${{ github.event.client_payload.vps_name || 'manual-vps' }}.txt"
          echo "Username: hieudzontop" | tee -a "links/${{ github.event.client_payload.vps_name || 'manual-vps' }}.txt"
          echo "Password: hieudzkoaibang" | tee -a "links/${{ github.event.client_payload.vps_name || 'manual-vps' }}.txt"
          echo "" | tee -a "links/${{ github.event.client_payload.vps_name || 'manual-vps' }}.txt"
          echo "‚ö†Ô∏è N·∫øu k·∫øt n·ªëi b·ªã t·ª´ ch·ªëi, th·ª≠ c√°c tunnel kh√°c ·ªü tr√™n" | tee -a "links/${{ github.event.client_payload.vps_name || 'manual-vps' }}.txt"
          echo "üìÖ Created: $(date)" | tee -a "links/${{ github.event.client_payload.vps_name || 'manual-vps' }}.txt"

      - name: üì¶ Save backup
        run: |
          name="${{ github.event.client_payload.vps_name || 'manual-vps' }}"
          zip -qr ".backup/$name.zip" . -x ".git/*" ".github/*" ".backup/*" || true

      - name: üì§ Push updated files
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "üîë Updated SSH access links"
          file_pattern: 'links/*.txt .backup/*.zip'

      - name: ‚è≥ Keep VPS alive & monitor
        run: |
          for i in $(seq 1 $((360))); do
            echo "üü¢ VPS running - minute $i/360 ($(date))"
            
            # Check connections every 30 minutes
            if [ $((i % 30)) -eq 0 ]; then
              echo "=== Active Users ===" | tee -a "links/${{ github.event.client_payload.vps_name || 'manual-vps' }}.txt"
              who | tee -a "links/${{ github.event.client_payload.vps_name || 'manual-vps' }}.txt" 2>/dev/null || echo "No active sessions"
            fi
            
            sleep 60
          done

      - name: üîÅ Auto restart workflow
        if: always()
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer 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" \
            -H "Content-Type: application/json" \
            https://api.github.com/repos/${{ github.repository }}/dispatches \
            -d '{"event_type": "create-vps", "client_payload": {"vps_name": "manual-vps", "backup": true}}'
